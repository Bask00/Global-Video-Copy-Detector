import glob

def Hamming_Distance(P, Q):
	length = len(P);
	result = 0;
	i = 0;
	while i < length:
		if P[i]!=Q[i]: 
			result = result + 1;
		i=i+1;
	return result;


def Detect_Copy(P, Q, threshold_dist):
	result = [];
	for ind1, img1 in enumerate(P):
		for ind2, img2 in enumerate(Q):
			result_aux = [];
			dist = Hamming_Distance(img1, img2);
			if dist <= threshold_dist:
				result_aux.append(dist);
				result_aux.append(ind1);
				result_aux.append(round(ind2/(3*60), 2));
				result.append(result_aux);

	return result;
	

def File_to_Array(file):
	print("Reading: " + file);
	file = open(file,"r");
	vector_vid = [];
	i = 0;
	for line in file:
		vector_img = line.split("-");
		for counter, pix in enumerate(vector_img):
			vector_img[counter] = int(pix);

		vector_vid.append(vector_img);

	file.close();
	return vector_vid;


commercials = glob.glob("extract_com/*.txt");
commercials.sort();

television = glob.glob("extract_tv/*.txt");
television.sort();

vector_vid_com = [];
vector_vid_tv = [];

for vid in commercials:
	vector_vid_com.append(File_to_Array(vid));

for vid in television:
	vector_vid_tv.append(File_to_Array(vid));
	

for ind1, vid_com in enumerate(vector_vid_com):
	file_name = commercials[ind1].split("\\")[1];
	file_name = "results/"+file_name;
	print("starting saving in: " + file_name);
	file = open(file_name,"w");
	for ind2, vid_tv in enumerate(vector_vid_tv):
		file.write(television[ind2]);
		file.write('\n');
		print("comparing with " + television[ind2]);
		copies_detected = Detect_Copy(vid_com, vid_tv, 3);
		for copy in copies_detected:
			line = '-'.join(str(e) for e in copy);
			file.write(line);
			file.write('\n');

		if len(copies_detected) == 0:
			file.write("No copies detected");
			file.write('\n');

		file.write('\n');

	file.close();
	print("finished");